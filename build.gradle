plugins {
    id 'java'
    id 'checkstyle'
    id 'pmd'
    id 'name.remal.sonarlint' version '3.0.6'
    id 'org.sonarqube' version '3.3'
    id 'jacoco'
    id 'info.solidsoft.pitest' version '1.9.11'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
}

group 'com.nelkinda.training.gameoflife'
version '0.0.1-SNAPSHOT'

sourceCompatibility = 18

repositories {
    mavenCentral()
}

dependencyManagement {
    dependencies {
        dependency 'com.puppycrawl.tools:checkstyle:10.3.2'
        dependencySet(group: 'io.cucumber', version: '7.11.1') {
            entry 'cucumber-java'
            entry 'cucumber-junit-platform-engine'
        }
        dependencySet(group: 'net.sourceforge.pmd', version: '6.48.0') {
            entry 'pmd'
            entry 'pmd-core'
            entry 'pmd-java'
        }
        dependency 'org.hamcrest:hamcrest:2.2'
        dependencySet(group: 'org.junit.jupiter', version: '5.9.0') {
            entry 'junit-jupiter'
            entry 'junit-jupiter-api'
            entry 'junit-jupiter-engine'
            entry 'junit-jupiter-params'
        }
        dependencySet(group: 'org.junit.platform', version: '1.9.0') {
            entry 'junit-platform-commons'
            entry 'junit-platform-engine'
            entry 'junit-platform-launcher'
            entry 'junit-platform-suite-api'
            entry 'junit-platform-suite-commons'
            entry 'junit-platform-suite-engine'
        }
        dependency 'org.pitest:pitest-junit5-plugin:1.1.2'
        dependency 'org.pitest:pitest-command-line:1.11.0'
        dependency 'org.projectlombok:lombok:1.18.24'
    }
}

dependencies {
    checkstyle 'com.puppycrawl.tools:checkstyle'

    annotationProcessor "org.projectlombok:lombok"
    compileOnly "org.projectlombok:lombok"

    testAnnotationProcessor "org.projectlombok:lombok"
    testCompileOnly "org.projectlombok:lombok"

    testImplementation 'io.cucumber:cucumber-java'
    testImplementation 'io.cucumber:cucumber-junit-platform-engine'
    testImplementation 'org.hamcrest:hamcrest'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.junit.jupiter:junit-jupiter-params'
    testImplementation 'org.junit.platform:junit-platform-commons'
    testImplementation 'org.junit.platform:junit-platform-engine'
    testImplementation 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.junit.platform:junit-platform-suite-api'
    testImplementation 'org.junit.platform:junit-platform-suite-commons'
    testImplementation 'org.junit.platform:junit-platform-suite-engine'

    pitest 'org.pitest:pitest-junit5-plugin'
    pitest 'org.pitest:pitest-command-line'
}

checkstyleMain {
    configFile = file("config/checkstyle/checkstyleMain.xml")
    maxWarnings = 0
}

checkstyleTest {
    configFile = file("config/checkstyle/checkstyleTest.xml")
    maxWarnings = 0
}

jacoco {
    toolVersion = "0.8.8"
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 1.0
            }
        }
    }
}
check.dependsOn jacocoTestCoverageVerification

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = true
        html.required = true
    }
}
test.finalizedBy jacocoTestReport

java {
    modularity.inferModulePath.set(true)
}

pitest {
    targetClasses.set(['com.nelkinda.training.gameoflife.*'])
    pitestVersion.set('1.11.0')
    timestampedReports.set(false)
    outputFormats.set(['XML', 'HTML'])
    mutators.set(['DEFAULTS', 'STRONGER', 'CONSTRUCTOR_CALLS', 'INLINE_CONSTS', 'REMOVE_CONDITIONALS', 'REMOVE_INCREMENTS'])
    mutationThreshold.set(100)
    coverageThreshold.set(100)
}

pmd {
    ruleSets = []
    consoleOutput = true
    dependencies {
        pmd 'net.sourceforge.pmd:pmd'
        pmd 'net.sourceforge.pmd:pmd-core'
        pmd 'net.sourceforge.pmd:pmd-java'
    }
}

pmdMain {
    ruleSetFiles = files("config/pmd/pmdMain.xml")
}

pmdTest {
    ruleSetFiles = files("config/pmd/pmdTest.xml")
}

test {
    useJUnitPlatform()
}

wrapper {
    gradleVersion '8.0'
    distributionType = Wrapper.DistributionType.ALL
}
